*vgit.nvim*                                                                *vgit*

A Git integration plugin for Neovim that enhances your Git experience visually.

==============================================================================
REQUIREMENTS                                                 *vgit-requirements*

- Neovim >= 0.10.0
- Git >= 2.18.0

License: MIT

==============================================================================
INTRODUCTION                                                 *vgit-introduction*

VGit is a Git integration plugin that provides visual enhancements to your Git
workflow in Neovim. 

==============================================================================
SETUP                                                               *vgit-setup*

Basic setup with default configuration: >
        require('vgit').setup()
<

For detailed configuration options, see |vgit-configuration|.

==============================================================================
COMMANDS                                                         *vgit-commands*

                                                                      *:VGit*
:VGit {subcommand} {arguments}                                
        Execute VGit commands. Tab completion shows available |vgit-functions|.
        Equivalent to `:lua require('vgit').{subcommand}([arguments])`

==============================================================================
FUNCTIONS                                                       *vgit-functions*

Core Functions~
                                                                   *vgit.setup()*
setup({config})                                                
        Initialize VGit with optional configuration table.
        Must be called before using any other functionality.

                                                                    *vgit.help()*
help()                                                
        Opens vim documentation for the plugin.

Buffer Operations~
                                                     *vgit.buffer_diff_preview()*
buffer_diff_preview()                              
        Show diff preview of current buffer compared to index.
        When cursor is on a hunk, focuses on that specific change.

                                                      *vgit.buffer_hunk_preview()*
buffer_hunk_preview()                             
        Display focused diff preview near cursor position.

                                                     *vgit.buffer_blame_preview()*
buffer_blame_preview()                          
        Show blame information for current line.
        Press <Enter> to view commit details in |vgit.project_commits_preview()|

                                                   *vgit.buffer_history_preview()*
buffer_history_preview()                      
        Display file history with interactive diff viewing.

                                                        *vgit.buffer_hunk_reset()*
buffer_hunk_reset({target}, {opts})                 
        Reset hunk under cursor to HEAD version.

                                                        *vgit.buffer_hunk_stage()*
buffer_hunk_stage()                 
        Stages the current hunk under cursor.

                                                             *vgit.buffer_stage()*
buffer_stage()                                       
        Stage all changes in current buffer.

                                                           *vgit.buffer_unstage()*
buffer_unstage()                                     
        Unstage all changes in current buffer.
                                                             *vgit.buffer_reset()*
buffer_reset()                                       
        Reset buffer to HEAD version, discarding changes.

                                              *vgit.buffer_conflict_accept_both()*
buffer_conflict_accept_both()
        Acceps both changes from the conflict under cursor.

                                           *vgit.buffer_conflict_accept_current()*
buffer_conflict_accept_current()                         
        Accepts the current changes form the conflict under cursor.

                                          *vgit.buffer_conflict_accept_incoming()*
buffer_conflict_accept_incoming()                                       
        Accepts the incoming changes form the conclict under cursor.

Project-wide Operations~
                                                     *vgit.project_diff_preview()*
project_diff_preview()                             
        Show project-wide diff with staged/unstaged files list.
        Supports configurable keymaps for various operations.

                                                     *vgit.project_logs_preview()*
project_logs_preview([options...])                
        Display branch commit logs with filtering support.
        Use <Tab> to select, <Enter> to view commits.

                                                   *vgit.project_commit_preview()*
project_commit_preview()                       
        Interactive commit interface for staged changes.

                                                  *vgit.project_commits_preview()*
project_commits_preview([commit1, commit2, ...])
        Show commit details with optional filtering.
        Use <Tab> to select, <Enter> to view details.

                                                    *vgit.project_stash_preview()*
project_stash_preview()                       
        List and manage stashed changes.

Navigation and Toggles~
                                                                  *vgit.hunk_up()*
hunk_up()                                         
        Move cursor to previous hunk.

                                                                *vgit.hunk_down()*
hunk_down()                                       
        Move cursor to next hunk.

                                                   *vgit.toggle_diff_preference()*
toggle_diff_preference()                         
        Switch between split and unified diff views.

                                                       *vgit.toggle_live_gutter()*
toggle_live_gutter()                             
        Toggle git gutter signs visibility.

                                                        *vgit.toggle_live_blame()*
toggle_live_blame()                              
        Toggle inline blame information.

                                                           *vgit.toggle_tracing()*
toggle_tracing()                                 
        Toggle debug logging visibility.

==============================================================================
NAVIGATION                                                     *vgit-navigation*

All VGit previews with change highlights support navigation. Recommended
keymaps:
- |hunk_up()|: Map to <C-k> for previous hunk
- |hunk_down()|: Map to <C-j> for next hunk

Navigation works in both diff views and associated tables.

==============================================================================
CONFIGURATION                                              *vgit-configuration*

Detailed configuration example: >

        require('vgit').setup({
          keymaps = {
            ['n <C-k>'] = function() require('vgit').hunk_up() end,
            ['n <C-j>'] = function() require('vgit').hunk_down() end,
            ['n <leader>gs'] = function() require('vgit').buffer_hunk_stage() end,
            ['n <leader>gr'] = function() require('vgit').buffer_hunk_reset() end,
            ['n <leader>gp'] = function() require('vgit').buffer_hunk_preview() end,
            ['n <leader>gb'] = function() require('vgit').buffer_blame_preview() end,
            ['n <leader>gf'] = function() require('vgit').buffer_diff_preview() end,
            ['n <leader>gh'] = function() require('vgit').buffer_history_preview() end,
            ['n <leader>gu'] = function() require('vgit').buffer_reset() end,
            ['n <leader>gd'] = function() require('vgit').project_diff_preview() end,
            ['n <leader>gx'] = function() require('vgit').toggle_diff_preference() end,
          },
          settings = {
            hls = {
              GitCount = 'Keyword',
              GitSymbol = 'CursorLineNr',
              GitTitle = 'Directory',
              GitSelected = 'QuickfixLine',
              GitBackground = 'Normal',
              GitAppBar = 'StatusLine',
              GitHeader = 'NormalFloat',
              GitFooter = 'NormalFloat',
              GitBorder = 'LineNr',
              GitLineNr = 'LineNr',
              GitComment = 'Comment',
              GitSignsAdd = {
                gui = nil,
                fg = '#d7ffaf',
                bg = nil,
                sp = nil,
                override = false,
              },
              GitSignsChange = {
                gui = nil,
                fg = '#7AA6DA',
                bg = nil,
                sp = nil,
                override = false,
              },
              GitSignsDelete = {
                gui = nil,
                fg = '#e95678',
                bg = nil,
                sp = nil,
                override = false,
              },
              GitSignsAddLn = 'DiffAdd',
              GitSignsDeleteLn = 'DiffDelete',
              GitWordAdd = {
                gui = nil,
                fg = nil,
                bg = '#5d7a22',
                sp = nil,
                override = false,
              },
              GitWordDelete = {
                gui = nil,
                fg = nil,
                bg = '#960f3d',
                sp = nil,
                override = false,
              },
              GitConflictCurrentMark = 'DiffAdd',
              GitConflictAncestorMark = 'Visual',
              GitConflictIncomingMark = 'DiffChange',
              GitConflictCurrent = 'DiffAdd',
              GitConflictAncestor = 'Visual',
              GitConflictMiddle = 'Visual',
              GitConflictIncoming = 'DiffChange',
            },
            live_blame = {
              enabled = true,
              format = function(blame, git_config)
                local config_author = git_config['user.name']
                local author = blame.author
                if config_author == author then
                  author = 'You'
                end
                local time = os.difftime(os.time(), blame.author_time)
                  / (60 * 60 * 24 * 30 * 12)
                local time_divisions = {
                  { 1, 'years' },
                  { 12, 'months' },
                  { 30, 'days' },
                  { 24, 'hours' },
                  { 60, 'minutes' },
                  { 60, 'seconds' },
                }
                local counter = 1
                local time_division = time_divisions[counter]
                local time_boundary = time_division[1]
                local time_postfix = time_division[2]
                while time < 1 and counter ~= #time_divisions do
                  time_division = time_divisions[counter]
                  time_boundary = time_division[1]
                  time_postfix = time_division[2]
                  time = time * time_boundary
                  counter = counter + 1
                end
                local commit_message = blame.commit_message
                if not blame.committed then
                  author = 'You'
                  commit_message = 'Uncommitted changes'
                  return string.format(' %s • %s', author, commit_message)
                end
                local max_commit_message_length = 255
                if #commit_message > max_commit_message_length then
                  commit_message = commit_message:sub(1, max_commit_message_length) .. '...'
                end
                return string.format(
                  ' %s, %s • %s',
                  author,
                  string.format(
                    '%s %s ago',
                    time >= 0 and math.floor(time + 0.5) or math.ceil(time - 0.5),
                    time_postfix
                  ),
                  commit_message
                )
              end,
            },
            live_gutter = {
              enabled = true,
              edge_navigation = true, -- This allows users to navigate within a hunk
            },
            scene = {
              diff_preference = 'unified', -- unified or split
              keymaps = {
                quit = 'q'
              }
            },
            diff_preview = {
              keymaps = {
                reset = 'r',
                buffer_stage = 'S',
                buffer_unstage = 'U',
                buffer_hunk_stage = 's',
                buffer_hunk_unstage = 'u',
                toggle_view = 't',
              },
            },
            project_diff_preview = {
              keymaps = {
                commit = 'C',
                buffer_stage = 's',
                buffer_unstage = 'u',
                buffer_hunk_stage = 'gs',
                buffer_hunk_unstage = 'gu',
                buffer_reset = 'r',
                stage_all = 'S',
                unstage_all = 'U',
                reset_all = 'R',
              },
            },
            project_commit_preview = {
              keymaps = {
                save = 'S',
              },
            },
            signs = {
              priority = 10,
              definitions = {
                GitConflictCurrentMark = {
                  linehl = 'GitConflictCurrentMark',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitConflictAncestorMark = {
                  linehl = 'GitConflictAncestorMark',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitConflictIncomingMark = {
                  linehl = 'GitConflictIncomingMark',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitConflictCurrent = {
                  linehl = 'GitConflictCurrent',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitConflictAncestor = {
                  linehl = 'GitConflictAncestor',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitConflictMiddle = {
                  linehl = 'GitConflictMiddle',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitConflictIncoming = {
                  linehl = 'GitConflictIncoming',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitSignsAddLn = {
                  linehl = 'GitSignsAddLn',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitSignsDeleteLn = {
                  linehl = 'GitSignsDeleteLn',
                  texthl = nil,
                  numhl = nil,
                  icon = nil,
                  text = '',
                },
                GitSignsAdd = {
                  texthl = 'GitSignsAdd',
                  numhl = nil,
                  icon = nil,
                  linehl = nil,
                  text = '┃',
                },
                GitSignsDelete = {
                  texthl = 'GitSignsDelete',
                  numhl = nil,
                  icon = nil,
                  linehl = nil,
                  text = '┃',
                },
                GitSignsChange = {
                  texthl = 'GitSignsChange',
                  numhl = nil,
                  icon = nil,
                  linehl = nil,
                  text = '┃',
                },
              },
              usage = {
                screen = {
                  add = 'GitSignsAddLn',
                  remove = 'GitSignsDeleteLn',
                  conflict_current_mark = 'GitConflictCurrentMark',
                  conflict_current = 'GitConflictCurrent',
                  conflict_middle = 'GitConflictMiddle',
                  conflict_incoming_mark = 'GitConflictIncomingMark',
                  conflict_incoming = 'GitConflictIncoming',
                  conflict_ancestor_mark = 'GitConflictAncestorMark',
                  conflict_ancestor = 'GitConflictAncestor'
                },
                main = {
                  add = 'GitSignsAdd',
                  remove = 'GitSignsDelete',
                  change = 'GitSignsChange',
                },
              },
            },
            symbols = {
              void = '⣿',
              open = '',
              close = '',
            },
          }
        })

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
